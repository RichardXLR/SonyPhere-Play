package com.richard.musicplayer.utils

import android.content.Context
import android.media.AudioAttributes
import android.media.AudioManager
import android.media.SoundPool
import android.os.Build
import android.util.Log
import androidx.annotation.RawRes
import com.richard.musicplayer.R
import com.richard.musicplayer.db.PrivacySecurityRepository
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.first
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Gerenciador de efeitos sonoros da UI com otimiza√ß√µes de performance
 * e controle inteligente de volume baseado nas configura√ß√µes do sistema.
 */
@Singleton
class AudioFeedbackManager @Inject constructor(
    private val context: Context,
    private val privacySecurityRepository: PrivacySecurityRepository
) {
    companion object {
        private const val TAG = "AudioFeedbackManager"
        private const val MAX_STREAMS = 5
        private const val DEFAULT_VOLUME = 0.08f  // Ajuste fino final - extremamente discreto
        private const val FADE_DURATION = 50L
    }
    
    private var soundPool: SoundPool? = null
    private var audioManager: AudioManager? = null
    private val loadedSounds = mutableMapOf<Int, Int>()
    private var isInitialized = false
    private val scope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    
    // ID do som de desbloqueio (Som 7 - Digital escolhido pelo usu√°rio)
    private var unlockSuccessSoundId: Int = 0
    
    /**
     * Inicializa o sistema de √°udio com configura√ß√µes otimizadas para reprodu√ß√£o instant√¢nea
     */
    fun initialize() {
        if (isInitialized) {
            Log.d(TAG, "‚úÖ AudioFeedbackManager j√° inicializado")
            return
        }
        
        try {
            val initStartTime = System.currentTimeMillis()
            Log.d(TAG, "üöÄ Inicializando AudioFeedbackManager...")
            
            audioManager = context.getSystemService(Context.AUDIO_SERVICE) as AudioManager
            
            // Configurar SoundPool com AudioAttributes otimizadas para baixa lat√™ncia
            val audioAttributes = AudioAttributes.Builder()
                .setUsage(AudioAttributes.USAGE_ASSISTANCE_SONIFICATION)
                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                .setFlags(AudioAttributes.FLAG_AUDIBILITY_ENFORCED or AudioAttributes.FLAG_LOW_LATENCY)
                .build()
            
            soundPool = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                SoundPool.Builder()
                    .setMaxStreams(MAX_STREAMS)
                    .setAudioAttributes(audioAttributes)
                    .build()
            } else {
                @Suppress("DEPRECATION")
                SoundPool(MAX_STREAMS, AudioManager.STREAM_NOTIFICATION, 0)
            }
            
            // PR√â-CARREGAMENTO IMEDIATO para reprodu√ß√£o instant√¢nea
            preloadSoundsImmediate()
            
            isInitialized = true
            
            val initTime = System.currentTimeMillis() - initStartTime
            Log.d(TAG, "‚úÖ AudioFeedbackManager inicializado em ${initTime}ms")
            Log.d(TAG, "‚ö° Pronto para reprodu√ß√£o instant√¢nea")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao inicializar AudioFeedbackManager", e)
        }
    }
    
    /**
     * Pr√©-carrega o som de desbloqueio na mem√≥ria para reprodu√ß√£o instant√¢nea
     * Som Digital (antiga op√ß√£o 7) - sequ√™ncia r√°pida de tons
     */
    private fun preloadSounds() {
        scope.launch(Dispatchers.IO) {
            try {
                // Som de desbloqueio digital escolhido pelo usu√°rio
                unlockSuccessSoundId = loadSound(R.raw.unlock_success)
                
                Log.d(TAG, "üéµ Som de desbloqueio pr√©-carregado: unlock_success=$unlockSuccessSoundId")
                Log.d(TAG, "   üéº Tipo: Digital com sequ√™ncia de tons (350ms)")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao pr√©-carregar som de desbloqueio", e)
            }
        }
    }
    
    /**
     * ‚ö° PR√â-CARREGAMENTO IMEDIATO para reprodu√ß√£o instant√¢nea
     * Carrega o som sincronamente na thread atual para garantir disponibilidade imediata
     */
    private fun preloadSoundsImmediate() {
        try {
            val loadStartTime = System.currentTimeMillis()
            Log.d(TAG, "‚ö° Iniciando pr√©-carregamento imediato...")
            
            // Carregar som sincronamente para garantir disponibilidade imediata
            unlockSuccessSoundId = soundPool?.load(context, R.raw.unlock_success, 1) ?: 0
            
            val loadTime = System.currentTimeMillis() - loadStartTime
            Log.d(TAG, "‚ö° Som pr√©-carregado instantaneamente em ${loadTime}ms")
            Log.d(TAG, "   üéº ID: $unlockSuccessSoundId | Tipo: Digital (350ms)")
            Log.d(TAG, "   üöÄ Pronto para reprodu√ß√£o com zero lat√™ncia")
            
            // Verificar se carregou corretamente
            if (unlockSuccessSoundId == 0) {
                Log.w(TAG, "‚ö†Ô∏è Falha no pr√©-carregamento imediato, usando carregamento ass√≠ncrono como fallback")
                preloadSounds() // Fallback para m√©todo ass√≠ncrono
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro no pr√©-carregamento imediato", e)
            preloadSounds() // Fallback para m√©todo ass√≠ncrono
        }
    }
    
    /**
     * Carrega um som na SoundPool
     */
    private suspend fun loadSound(@RawRes soundResId: Int): Int = withContext(Dispatchers.IO) {
        soundPool?.load(context, soundResId, 1) ?: 0
    }
    
    /**
     * Reproduz o som de desbloqueio bem-sucedido com volume adaptativo
     * Som Digital: sequ√™ncia r√°pida de tons (350ms) - escolhido pelo usu√°rio
     */
    fun playUnlockSuccess(forcePlay: Boolean = false) {
        Log.d(TAG, "üéµ Reproduzindo som digital de desbloqueio (forcePlay: $forcePlay)...")
        
        if (!isInitialized) {
            Log.w(TAG, "‚ö†Ô∏è AudioFeedbackManager n√£o inicializado, inicializando agora...")
            initialize()
        }
        
        scope.launch {
            try {
                // Verificar se o som est√° habilitado nas configura√ß√µes do usu√°rio
                val unlockSoundEnabled = isUnlockSoundEnabled()
                if (!unlockSoundEnabled && !forcePlay) {
                    Log.d(TAG, "üîá Som de desbloqueio desabilitado nas configura√ß√µes (use forcePlay=true para testar)")
                    return@launch
                }
                
                // Verificar se o som est√° carregado
                if (unlockSuccessSoundId == 0) {
                    Log.w(TAG, "‚ö†Ô∏è Som n√£o pr√©-carregado, carregando agora...")
                    unlockSuccessSoundId = loadSound(R.raw.unlock_success)
                    delay(200) // Aguardar carregamento
                }
                
                val soundEffectsEnabled = areSoundEffectsEnabled()
                Log.d(TAG, "üîä Efeitos sonoros do sistema: $soundEffectsEnabled")
                
                if (!soundEffectsEnabled && !forcePlay) {
                    Log.w(TAG, "‚ö†Ô∏è Efeitos sonoros desabilitados no sistema (use forcePlay=true para ignorar)")
                    return@launch
                }
                
                val volume = calculateOptimalVolume()
                Log.d(TAG, "üìä Volume calculado: $volume")
                
                // Se forcePlay=true, usar volume m√≠nimo mesmo se calculado como 0
                val finalVolume = if (forcePlay && volume <= 0f) {
                    0.015f // Volume final - quase sussurro
                } else {
                    volume
                }
                
                if (finalVolume <= 0f) {
                    Log.w(TAG, "‚ö†Ô∏è Volume zero, n√£o reproduzindo som")
                    return@launch
                }
                
                val result = playSound(unlockSuccessSoundId, finalVolume)
                Log.d(TAG, "üîì Som digital de desbloqueio reproduzido com sucesso!")
                Log.d(TAG, "   üéº ID: $unlockSuccessSoundId | Volume: $finalVolume | Forced: $forcePlay | Habilitado: $unlockSoundEnabled")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao reproduzir som de desbloqueio digital", e)
            }
        }
    }
    
    /**
     * ‚ö° REPRODU√á√ÉO INSTANT√ÇNEA do som de desbloqueio
     * Otimizado para execu√ß√£o imediata ap√≥s valida√ß√£o de autentica√ß√£o
     * Elimina delays e verifica√ß√µes desnecess√°rias para m√°xima responsividade
     */
    fun playUnlockSuccessInstant() {
        val startTime = System.currentTimeMillis()
        Log.d(TAG, "‚ö° REPRODU√á√ÉO INSTANT√ÇNEA iniciada...")
        
        if (!isInitialized) {
            Log.w(TAG, "‚ö†Ô∏è AudioFeedbackManager n√£o inicializado para reprodu√ß√£o instant√¢nea")
            initialize()
        }
        
        // Usar MainDispatcher para execu√ß√£o imediata na thread principal
        scope.launch(Dispatchers.Main.immediate) {
            try {
                val checkTime = System.currentTimeMillis()
                
                // VERIFICA√á√ÉO R√ÅPIDA: Som habilitado nas configura√ß√µes
                val unlockSoundEnabled = withContext(Dispatchers.IO) {
                    try {
                        val settings = privacySecurityRepository.settingsFlow.first()
                        settings[PrivacySecurityRepository.getPreferencesKey("unlock_sound_enabled")] as Boolean? ?: true
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erro na verifica√ß√£o r√°pida de configura√ß√£o", e)
                        true // Assume habilitado em caso de erro
                    }
                }
                
                if (!unlockSoundEnabled) {
                    Log.d(TAG, "üîá Som desabilitado nas configura√ß√µes - reprodu√ß√£o instant√¢nea cancelada")
                    return@launch
                }
                
                val configCheckTime = System.currentTimeMillis() - checkTime
                Log.d(TAG, "‚ö° Verifica√ß√£o de configura√ß√£o: ${configCheckTime}ms")
                
                // GARANTIR QUE O SOM ESTEJA CARREGADO
                if (unlockSuccessSoundId == 0) {
                    Log.w(TAG, "‚ö†Ô∏è Som n√£o pr√©-carregado para reprodu√ß√£o instant√¢nea, carregando...")
                    unlockSuccessSoundId = withContext(Dispatchers.IO) {
                        loadSound(R.raw.unlock_success)
                    }
                    // Sem delay - assumir que carregou instantaneamente
                }
                
                val loadCheckTime = System.currentTimeMillis() - checkTime
                Log.d(TAG, "‚ö° Verifica√ß√£o de carregamento: ${loadCheckTime}ms")
                
                // CALCULAR VOLUME RAPIDAMENTE
                val volume = try {
                    calculateOptimalVolume()
                } catch (e: Exception) {
                    Log.w(TAG, "‚ö†Ô∏è Erro no c√°lculo r√°pido de volume, usando padr√£o")
                    DEFAULT_VOLUME
                }
                
                val finalVolume = if (volume <= 0f) 0.015f else volume // M√≠nimo para reprodu√ß√£o instant√¢nea
                
                val volumeCheckTime = System.currentTimeMillis() - checkTime
                Log.d(TAG, "‚ö° C√°lculo de volume: ${volumeCheckTime}ms")
                
                                 // REPRODU√á√ÉO IMEDIATA otimizada
                 val playResult = playSoundInstant(unlockSuccessSoundId, finalVolume)
                
                val totalTime = System.currentTimeMillis() - startTime
                Log.d(TAG, "‚ö° REPRODU√á√ÉO INSTANT√ÇNEA CONCLU√çDA!")
                Log.d(TAG, "   ‚è±Ô∏è Tempo total: ${totalTime}ms")
                Log.d(TAG, "   üéº ID: $unlockSuccessSoundId | Volume: $finalVolume | StreamID: $playResult")
                Log.d(TAG, "   üîä Sincronizado com valida√ß√£o de autentica√ß√£o")
                
            } catch (e: Exception) {
                val errorTime = System.currentTimeMillis() - startTime
                Log.e(TAG, "‚ùå Erro na reprodu√ß√£o instant√¢nea ap√≥s ${errorTime}ms", e)
            }
        }
    }
    
    /**
     * Reproduz um som com volume especificado
     */
    private suspend fun playSound(soundId: Int, volume: Float = DEFAULT_VOLUME): Int {
        if (soundId == 0) {
            Log.w(TAG, "‚ö†Ô∏è Som n√£o carregado (ID: $soundId)")
            return -1
        }
        
        if (soundPool == null) {
            Log.e(TAG, "‚ùå SoundPool √© null")
            return -1
        }
        
        return withContext(Dispatchers.Main) {
            val streamId = soundPool?.play(
                soundId,
                volume,      // Volume esquerdo
                volume,      // Volume direito
                1,           // Prioridade
                0,           // Loop (0 = n√£o repetir)
                1.0f         // Taxa de reprodu√ß√£o
            ) ?: -1
            
            Log.d(TAG, "üéµ SoundPool.play() chamado - soundId: $soundId, volume: $volume, streamId: $streamId")
            streamId
        }
    }
    
    /**
     * ‚ö° REPRODU√á√ÉO INSTANT√ÇNEA otimizada
     * Reproduz som sem mudan√ßa de contexto quando j√° est√° na thread principal
     */
    private fun playSoundInstant(soundId: Int, volume: Float = DEFAULT_VOLUME): Int {
        if (soundId == 0) {
            Log.w(TAG, "‚ö†Ô∏è Som n√£o carregado para reprodu√ß√£o instant√¢nea (ID: $soundId)")
            return -1
        }
        
        if (soundPool == null) {
            Log.e(TAG, "‚ùå SoundPool √© null para reprodu√ß√£o instant√¢nea")
            return -1
        }
        
        // Reprodu√ß√£o direta sem mudan√ßa de contexto para m√°xima velocidade
        val streamId = soundPool?.play(
            soundId,
            volume,      // Volume esquerdo
            volume,      // Volume direito
            2,           // Prioridade alta para reprodu√ß√£o instant√¢nea
            0,           // Loop (0 = n√£o repetir)
            1.0f         // Taxa de reprodu√ß√£o
        ) ?: -1
        
        Log.d(TAG, "‚ö° SoundPool.playInstant() - soundId: $soundId, volume: $volume, streamId: $streamId")
        return streamId
    }
    
    /**
     * Calcula o volume √≥timo baseado nas configura√ß√µes do sistema
     */
    private fun calculateOptimalVolume(): Float {
        return try {
            val audioManager = this.audioManager ?: return DEFAULT_VOLUME
            
            // Verificar se o dispositivo est√° no modo silencioso
            val ringerMode = audioManager.ringerMode
            if (ringerMode == AudioManager.RINGER_MODE_SILENT) {
                return 0f
            }
            
            // Verificar se o dispositivo est√° no modo vibra√ß√£o
            if (ringerMode == AudioManager.RINGER_MODE_VIBRATE) {
                return 0.025f // Volume final - extremamente baixo para modo vibra√ß√£o
            }
            
            // Calcular volume baseado no volume do sistema
            val systemVolume = audioManager.getStreamVolume(AudioManager.STREAM_NOTIFICATION)
            val maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_NOTIFICATION)
            
            if (maxVolume == 0) return 0f
            
            val systemVolumeRatio = systemVolume.toFloat() / maxVolume.toFloat()
            
            // Aplicar uma curva suave para volume extremamente baixo e discreto
            val adjustedVolume = (systemVolumeRatio * DEFAULT_VOLUME * 0.3f).coerceIn(0f, 0.06f)
            
            Log.d(TAG, "üìä Volume calculado: sistema=$systemVolumeRatio, ajustado=$adjustedVolume")
            
            adjustedVolume
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao calcular volume", e)
            DEFAULT_VOLUME
        }
    }
    
    /**
     * Verifica se os efeitos sonoros est√£o habilitados no sistema
     */
    fun areSoundEffectsEnabled(): Boolean {
        return try {
            val contentResolver = context.contentResolver
            android.provider.Settings.System.getInt(
                contentResolver,
                android.provider.Settings.System.SOUND_EFFECTS_ENABLED,
                1
            ) == 1
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao verificar efeitos sonoros do sistema", e)
            true // Assume habilitado por padr√£o
        }
    }
    
    /**
     * Verifica se o som de desbloqueio est√° habilitado nas configura√ß√µes do app
     */
    private suspend fun isUnlockSoundEnabled(): Boolean {
        return try {
            val settings = privacySecurityRepository.settingsFlow.first()
            val isEnabled = settings[PrivacySecurityRepository.getPreferencesKey("unlock_sound_enabled")] as Boolean? ?: true
            Log.d(TAG, "üîä Som de desbloqueio nas configura√ß√µes: $isEnabled")
            isEnabled
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao verificar configura√ß√£o de som de desbloqueio", e)
            true // Assume habilitado por padr√£o
        }
    }
    
    /**
     * Pausa todos os sons em reprodu√ß√£o
     */
    fun pauseAll() {
        scope.launch {
            soundPool?.autoPause()
            Log.d(TAG, "‚è∏Ô∏è Todos os sons pausados")
        }
    }
    
    /**
     * Retoma a reprodu√ß√£o de sons
     */
    fun resumeAll() {
        scope.launch {
            soundPool?.autoResume()
            Log.d(TAG, "‚ñ∂Ô∏è Reprodu√ß√£o de sons retomada")
        }
    }
    
    /**
     * Libera recursos do sistema de √°udio
     */
    fun release() {
        scope.launch {
            try {
                soundPool?.release()
                soundPool = null
                loadedSounds.clear()
                isInitialized = false
                
                Log.d(TAG, "üßπ AudioFeedbackManager liberado")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao liberar AudioFeedbackManager", e)
            }
        }
        
        scope.cancel()
    }
    

    
    /**
     * Reproduz um som de feedback gen√©rico com par√¢metros customiz√°veis
     */
    fun playCustomFeedback(
        @RawRes soundResId: Int,
        volume: Float = DEFAULT_VOLUME,
        pitch: Float = 1.0f
    ) {
        if (!isInitialized) {
            initialize()
        }
        
        scope.launch {
            try {
                val soundId = loadSound(soundResId)
                delay(100) // Aguardar carregamento
                
                soundPool?.play(
                    soundId,
                    volume,
                    volume,
                    1,
                    0,
                    pitch
                )
                
                Log.d(TAG, "üéµ Som customizado reproduzido (res: $soundResId, volume: $volume, pitch: $pitch)")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao reproduzir som customizado", e)
            }
        }
    }
} 